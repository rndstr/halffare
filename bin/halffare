#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'halffare'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/halffare` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/halffare now"
  exit 64
end

include GLI::App

program_desc 'Evaluates whether a SBB Half-Fare travelcard is profitable based on your online order history'

version Halffare::VERSION

desc 'Fetches your order history from sbb.ch and stores them in a file'
arg_name 'Describe arguments to list here'
command :fetch do |c|
  c.desc 'Username for sbb.ch'
  c.arg_name 'username'
  c.flag [:u,:username]

  c.desc 'Password for sbb.ch'
  c.arg_name 'password'
  c.flag [:p,:password]

  c.desc 'Filename to store the data in'
  c.default_value 'halffare.dat'
  c.arg_name 'file'
  c.flag [:f, :file]

  c.desc 'Number of pages to retrieve'
  c.default_value 2
  c.arg_name 'count'
  c.flag [:pages]

  c.desc 'Overwrite an existing data file'
  c.switch :force, :negatable => false

  c.desc 'Write HTTP requests and responses to http.log'
  c.switch :debug, :negatable => false

  c.action do |global_options,options,args|
    fetch = Halffare::Fetch.new(options[:debug])
    fetch.login(options[:username], options[:password])
    fetch.download(options[:file], options[:pages])
  end
end

desc "Calculates and displays stats about your order history"
arg_name 'Describe arguments to list here'
command :stats do |c|
  c.desc 'Filename to read the data from'
  c.default_value 'halffare.dat'
  c.arg_name 'file'
  c.flag [:f, :file]

  c.desc 'Strategy to use for determining price savings [guess, sbb]'
  c.default_value :guess
  c.arg_name :strategy
  c.flag [:s, :strategy]

  c.desc "Whether the past orders should be considered half-fare prices"
  c.switch [:h, :halffare], :negotiable => false

  c.action do |global_options,options,args|
    stats = Halffare::Stats.new
    stats.read(options[:file])
    stats.calculate(options[:strategy], options[:halffare])
    stats.display
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  p exception
  p exception.backtrace.join("\n")
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
