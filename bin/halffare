#!/usr/bin/env ruby
require 'gli'
require 'halffare'

include GLI::App

program_desc 'Evaluates whether a SBB Half-Fare travelcard is profitable based on your online order history'

version Halffare::VERSION

desc 'Fetches your order history from sbb.ch and stores them in a file'
command :fetch do |c|
  c.desc 'Username for sbb.ch'
  c.arg_name 'username'
  c.flag [:u,:username]

  c.desc 'Password for sbb.ch'
  c.arg_name 'password'
  c.flag [:p,:password]

  c.desc 'Filename to store the data in'
  c.default_value 'orders.halffare'
  c.arg_name 'output'
  c.flag [:o, :output]

  c.desc 'Number of pages to retrieve'
  c.default_value 32
  c.arg_name 'count'
  c.flag [:pages]

  c.desc 'Stop fetching orders when reaching months back'
  c.arg_name :months
  c.flag [:m, :months]

  c.desc 'Overwrite an existing data file'
  c.switch :force, :negatable => false

  c.desc 'Also print debug output'
  c.switch :debug, :negatable => false

  c.action do |global_options,options,args|
    Halffare.debug = options[:debug]
    if File.exists?(options[:output]) && !options[:force]
      log_error "file #{options[:output]} exists, use --force or --output"
    else
      fetch = Halffare::Fetch.new()
      fetch.login(options[:username], options[:password])
      fetch.download(options[:output], options[:pages], options[:months])
    end
  end
end

desc "Calculates and displays stats about your order history"
command :stats do |c|
  c.desc 'Filename to read the data from'
  c.default_value 'orders.halffare'
  c.arg_name 'input'
  c.flag [:i, :input]

  c.desc 'Strategy to use for determining price savings [guess, sbb, sbbguess]'
  c.default_value :sbbguess
  c.arg_name :strategy
  c.flag [:s, :strategy]
#  c.must_match [:sbb, :guess, 'sbbguess']

  c.desc 'Prices found in input file are of type [half, full, ask]'
  c.default_value :ask
  c.arg_name :pricetype
  c.flag [:p, :pricetype]
#  c.must_match [:half, :full, :ask]

  c.desc 'Restrict tickets for user name (if multiple users in same order, divides by count)'
  c.arg_name :user
  c.flag [:u, :user]

  c.desc 'Restrict how many months in the past to consider orders'
  c.arg_name :months
  c.flag [:m, :months]

  c.desc 'Also print debug output'
  c.switch :debug, :negatable => false

  c.action do |global_options,options,args|
    Halffare.debug = options[:debug]
    stats = Halffare::Stats.new
    stats.read(options[:input], options[:months], options[:user])
    if stats.count > 0
      if options[:pricetype] == :ask
        options[:pricetype] = yesno('Did you buy your tickets with a half-fare card?', nil) ? 'half' : 'full';
      end
      stats.calculate(options[:strategy], options[:pricetype] == 'half')
      stats.display(options[:pricetype] == 'half')
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  p exception
  p exception.backtrace.join("\n")
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
